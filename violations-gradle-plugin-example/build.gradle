buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath "se.bjurr.violations:violations-gradle-plugin:latest-SNAPSHOT"
	}
}

apply plugin: "java"
apply plugin: "se.bjurr.violations.violations-gradle-plugin"

task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
	//
	// Optional config
	//
	maxReporterColumnWidth.set(0) // 0 is disabled
	maxRuleColumnWidth.set(10)
	maxSeverityColumnWidth.set(0)
	maxLineColumnWidth.set(0)
	maxMessageColumnWidth.set(50)
	codeClimateFile.set(file('code-climate-file.json')) // Will create a CodeClimate JSON report.
	violationsFile.set(file('violations-file.json')) // Will create a normalized JSON report.

	//
	// Global configuration, remove if you dont want to report violations for
	// the entire repo.
	//
	minSeverity.set(se.bjurr.violations.lib.model.SEVERITY.INFO) // INFO, WARN or ERROR
	detailLevel.set(se.bjurr.violations.git.ViolationsReporterDetailLevel.VERBOSE) // PER_FILE_COMPACT, COMPACT or VERBOSE
	maxViolations.set(99999999) // Will fail the build if total number of found violations is higher
	printViolations.set(true) // Will print violations found in diff


	//
	// Diff configuration, remove if you dont want to report violations for
	// files changed between specific revisions.
	//
	// diff-properties can be supplied with something like:
	//
	// ./gradlew violations -i -PdiffFrom=e4de20e -PdiffTo=HEAD
	//
	// And in Travis, you could add:
	//
	//  script:
	//   - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then bash ./gradlew check -PdiffFrom=$TRAVIS_PULL_REQUEST_BRANCH -PdiffTo=$TRAVIS_BRANCH ; fi'
	//
	diffFrom.set(project.properties.diffFrom) // Can be empty (ignored), Git-commit or any Git-reference
	diffTo.set(project.properties.diffTo) // Same as above
	diffMinSeverity.set(se.bjurr.violations.lib.model.SEVERITY.INFO) // INFO, WARN or ERROR
	diffDetailLevel.set(se.bjurr.violations.git.ViolationsReporterDetailLevel.VERBOSE) // PER_FILE_COMPACT, COMPACT or VERBOSE
	diffMaxViolations.set(99) // Will fail the build if number of violations, in the diff within from/to, is higher
	diffPrintViolations.set(true) // Will print violations found in diff
	gitRepo.set(file('.')) // Where to look for Git


	//
	// This is mandatory regardless of if you want to report violations between
	// revisions or the entire repo.
	//
	// Many more formats available, see: https://github.com/tomasbjerre/violations-lib
	violationConfig()
		.setFolder(projectDir.path)
		.setParser(se.bjurr.violations.lib.reports.Parser.FINDBUGS)
		.setPattern(".*/findbugs/.*\\.xml\$")
		.setReporter("Findbugs")
	violationConfig()
		.setFolder(projectDir.path)
		.setParser(se.bjurr.violations.lib.reports.Parser.PMD)
		.setPattern(".*/pmd/.*\\.xml\$")
		.setReporter("PMD")
	violationConfig()
		.setFolder(projectDir.path)
		.setParser(se.bjurr.violations.lib.reports.Parser.CHECKSTYLE)
		.setPattern(".*/checkstyle/.*\\.xml\$")
		.setReporter("Checkstyle")
	violationConfig()
		.setFolder(projectDir.path)
		.setParser(se.bjurr.violations.lib.reports.Parser.JSLINT)
		.setPattern(".*/jshint/.*\\.xml\$")
		.setReporter("JSHint")
	violationConfig()
		.setFolder(projectDir.path)
		.setParser(se.bjurr.violations.lib.reports.Parser.CSSLINT)
		.setPattern(".*/csslint/.*\\.xml\$")
		.setReporter("CssLint")
}


task violationsLegacyWithoutTypes(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
	violations = [
		[
			"FINDBUGS",
			projectDir.path,
			".*/findbugs/.*\\.xml\$",
			"Findbugs"
		],
		[
			"PMD",
			projectDir.path,
			".*/pmd/.*\\.xml\$",
			"PMD"
		],
		[
			"CHECKSTYLE",
			projectDir.path,
			".*/checkstyle/.*\\.xml\$",
			"Checkstyle"
		],
		[
			"JSLINT",
			projectDir.path,
			".*/jshint/.*\\.xml\$",
			"JSHint"
		],
		[
			"CSSLINT",
			projectDir.path,
			".*/csslint/.*\\.xml\$",
			"CssLint"
		]
	]
}

/**
 * Test lazy loaded value.
 */
interface ViolationsTestExtension {
    Property<Integer> getMaxViolations()
}

def extension = project.extensions.create("violationsTestExtension", ViolationsTestExtension)
extension.maxViolations.convention(Integer.MAX_VALUE)

task violationsWithTestExtension(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
	maxViolations = extension.maxViolations
}

/**
 * Run all tests on build
 */
project.tasks.withType(se.bjurr.violations.gradle.plugin.ViolationsTask) { vt ->
	build.dependsOn vt
}
